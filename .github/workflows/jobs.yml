---
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint_markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Lint changelog file
        uses: avto-dev/markdown-lint@v1.5.0
        with:
          rules: '/lint/rules/changelog.js'
          config: '/lint/config/changelog.yml'
          args: './CHANGELOG.md'

      - name: Lint other markdown files
        uses: avto-dev/markdown-lint@v1.5.0
        with:
          config: './.github/workflows/config/markdown_lint_config.yml'
          args: './*.md'
          ignore: './CHANGELOG.md'

  lint_yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Yamllint Github Action
        uses: karancode/yamllint-github-action@v2.0.0
        with:
          yamllint_strict: true
          yamllint_comment: true

  verify_browser_dns_cache_hit:
    runs-on: ubuntu-latest
    env:
      LOCATION_DEB_CACHE: /tmp/deb-cache
      URL_GOOGLE_CHROME_DEB: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  # yamllint disable-line rule:line-length
      DISPLAY: :1
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: apt-get
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq \
            tcpdump \
            python3-pip \
            xvfb \
            wget
      - name: pip
        run: sudo pip install selenium
      - name: Run Xvfb
        run: Xvfb ${DISPLAY} -screen 0 1600x1200x24+32 &
      - name: Run tcpdump
        run: (sudo tcpdump -n udp port 53 > tcpdump-udp-port-53.txt) &
      - name: Run Google Chrome version
        run: google-chrome --version
      - name: Run Google Chrome
        run: python3 ./docker/client/selenium/google-resolve-browser-cache-hit.py  # yamllint disable-line rule:line-length
      - name: Stop tcpdump
        run: sudo kill $(pidof tcpdump)
      - name: assert
        run: jobs/assert/assert_tcpdump_dns_resolution_count.sh tcpdump-udp-port-53.txt www.google.com 1  # yamllint disable-line rule:line-length

  verify_browser_dns_cache_miss_process:
    runs-on: ubuntu-latest
    env:
      LOCATION_DEB_CACHE: /tmp/deb-cache
      URL_GOOGLE_CHROME_DEB: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  # yamllint disable-line rule:line-length
      DISPLAY: :1
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: apt-get
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq \
            tcpdump \
            python3-pip \
            xvfb \
            wget
      - name: pip
        run: sudo pip install selenium
      - name: Run Xvfb
        run: Xvfb ${DISPLAY} -screen 0 1600x1200x24+32 &
      - name: Run tcpdump
        run: (sudo tcpdump -n udp port 53 > tcpdump-udp-port-53.txt) &
      - name: Run Google Chrome version
        run: google-chrome --version
      - name: Run Google Chrome
        run: python3 ./docker/client/selenium/google-resolve-browser-cache-miss-process.py  # yamllint disable-line rule:line-length
      - name: Stop tcpdump
        run: sudo kill $(pidof tcpdump)
      - name: assert
        run: jobs/assert/assert_tcpdump_dns_resolution_count.sh tcpdump-udp-port-53.txt www.google.com 3  # yamllint disable-line rule:line-length

  verify_browser_dns_cache_miss_expire:
    runs-on: ubuntu-latest
    env:
      LOCATION_DEB_CACHE: /tmp/deb-cache
      URL_GOOGLE_CHROME_DEB: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  # yamllint disable-line rule:line-length
      DISPLAY: :1
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: apt-get
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq \
            tcpdump \
            python3-pip \
            xvfb \
            wget
      - name: pip
        run: sudo pip install selenium
      - name: Run Xvfb
        run: Xvfb ${DISPLAY} -screen 0 1600x1200x24+32 &
      - name: Run tcpdump
        run: (sudo tcpdump -n udp port 53 > tcpdump-udp-port-53.txt) &
      - name: Run Google Chrome version
        run: google-chrome --version
      - name: Run Google Chrome
        run: python3 ./docker/client/selenium/google-resolve-browser-cache-miss-expire.py  # yamllint disable-line rule:line-length
      - name: Stop tcpdump
        run: sudo kill $(pidof tcpdump)
      - name: assert
        run: jobs/assert/assert_tcpdump_dns_resolution_count.sh tcpdump-udp-port-53.txt www.google.com 3  # yamllint disable-line rule:line-length

  verify_nscd_cache_hit:
    if: false
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_LOCATION_CLIENT: /tmp/.buildx-docker_client-cache
      CACHE_LOCATION_RESOLVER: /tmp/.buildx-docker_resolver-cache
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Cache docker_client layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-docker_client-cache
          key: >
            cache-${{ hashFiles('**/docker-compose.yml',
              '**/client/Dockerfile',
              '/tmp/.buildx-docker_client-cache/**') }}
      - name: Cache docker_resolver layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-docker_resolver-cache
          key: >
            cache-${{ hashFiles('**/docker-compose.yml',
              '**/resolver/Dockerfile',
              '/tmp/.buildx-docker_resolver-cache/**') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Build client
        run: >
          cd docker/client &&
          docker buildx build --load -t docker_client \
            --cache-from type=local,src=${CACHE_LOCATION_CLIENT} \
            --cache-to type=local,dest=${CACHE_LOCATION_CLIENT}-new .
      - name: Move cache after client build
        run: |
          rm -rf ${CACHE_LOCATION_CLIENT}
          mv ${CACHE_LOCATION_CLIENT}-new ${CACHE_LOCATION_CLIENT}
      - name: Build resolver
        run: >
          cd docker/resolver &&
          docker buildx build --load -t docker_resolver \
            --cache-from type=local,src=${CACHE_LOCATION_RESOLVER} \
            --cache-to type=local,dest=${CACHE_LOCATION_RESOLVER}-new .
      - name: Move cache after resolver build
        run: |
          rm -rf ${CACHE_LOCATION_RESOLVER}
          mv ${CACHE_LOCATION_RESOLVER}-new ${CACHE_LOCATION_RESOLVER}
      - name: docker-compose up
        run: scripts/docker-compose-up.sh
      - name: verify_nscd_cache_hit
        run: jobs/verify_nscd_cache_hit.sh
      - name: docker-compose down
        run: scripts/docker-compose-down.sh

  verify_nscd_cache_miss:
    if: false
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_LOCATION_CLIENT: /tmp/.buildx-docker_client-cache
      CACHE_LOCATION_RESOLVER: /tmp/.buildx-docker_resolver-cache
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Cache docker_client layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-docker_client-cache
          key: >
            cache-${{ hashFiles('**/docker-compose.yml',
              '**/client/Dockerfile',
              '/tmp/.buildx-docker_client-cache/**') }}
      - name: Cache docker_resolver layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-docker_resolver-cache
          key: >
            cache-${{ hashFiles('**/docker-compose.yml',
              '**/resolver/Dockerfile',
              '/tmp/.buildx-docker_resolver-cache/**') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Build client
        run: >
          cd docker/client &&
          docker buildx build --load -t docker_client \
            --cache-from type=local,src=${CACHE_LOCATION_CLIENT} \
            --cache-to type=local,dest=${CACHE_LOCATION_CLIENT}-new .
      - name: Move cache after client build
        run: |
          rm -rf ${CACHE_LOCATION_CLIENT}
          mv ${CACHE_LOCATION_CLIENT}-new ${CACHE_LOCATION_CLIENT}
      - name: Build resolver
        run: >
          cd docker/resolver &&
          docker buildx build --load -t docker_resolver \
            --cache-from type=local,src=${CACHE_LOCATION_RESOLVER} \
            --cache-to type=local,dest=${CACHE_LOCATION_RESOLVER}-new .
      - name: Move cache after resolver build
        run: |
          rm -rf ${CACHE_LOCATION_RESOLVER}
          mv ${CACHE_LOCATION_RESOLVER}-new ${CACHE_LOCATION_RESOLVER}
      - name: docker-compose up
        run: scripts/docker-compose-up.sh
      - name: verify_nscd_cache_miss
        run: jobs/verify_nscd_cache_miss.sh
      - name: docker-compose down
        run: scripts/docker-compose-down.sh
